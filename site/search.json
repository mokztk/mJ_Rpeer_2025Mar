[
  {
    "objectID": "Data_cleaning_CauseOfDeath_html.html#データクリーニングの方針",
    "href": "Data_cleaning_CauseOfDeath_html.html#データクリーニングの方針",
    "title": "Tidyverseを活用したデータ前処理の実践：初級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "1.1 データクリーニングの方針",
    "text": "1.1 データクリーニングの方針\n「見る」あるいは「見せる」ための表や雑然とした表を、コンピューターで認識できて（機械判読可能）解析に使用できる表に変形・変換する方針を考えます。100%従えなくとも大まかな目標としていくつか代表的なルールを示します。\nまた、元のファイルは極力編集せず編集の内容や経過はコードに残すようにします。\n\n1.1.1 総務省「統計表における機械判読可能なデータの表記方法の統一ルール」\n2020年に政府統計の総合窓口（e-Stat）に掲載する統計表におけるデータ表記方法の統一ルールとして総務省が策定した、「統計表における機械判読可能なデータの表記方法の統一ルールの策定 」では、機械判読可能であることを重視して以下のようなルールが示されています。\nExcelなど特定のソフトや政府統計に依存しない部分を抜粋すると、\n\n1セル1データとなっている\n数値データは数値属性とし、文字列（注：単位、注釈など）を含まない\nスペースや改行等で体裁を整えていない\n項目名等を省略していない（「薬剤A」 「B」 「C」は「薬剤A」 「薬剤B」 「薬剤C」とする）\nデータが分断されていない、1シートに複数の表が掲載されていない\n\n\n\n1.1.2 Tidy data（整然データ）: Wickham H. 2014\ntidyverse の作者である Hadley Wickham 氏が提唱 (Journal of Statistical Software. 59: 1-23, 2014) した概念で、「データの構造 (structure)」と「意味 (semantic)」を一致させることを目指しています。\n\n個々の変数 (variable) が1つの列 (column) をなす。\n個々の観測 (observation) が1つの行 (row) をなす。\n個々の観測の構成単位の類型 (type of observational unit) が1つの表 (table) をなす。\n個々の値 (value) が1つのセル (cell) をなす\n\nTidyverse はこの思想に基づいて作成されており、これらのパッケージをフルに活用するためには tidy data を意識することが必要です。"
  },
  {
    "objectID": "Data_cleaning_CauseOfDeath_html.html#コーディングスタイル",
    "href": "Data_cleaning_CauseOfDeath_html.html#コーディングスタイル",
    "title": "Tidyverseを活用したデータ前処理の実践：初級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "1.2 コーディングスタイル",
    "text": "1.2 コーディングスタイル\nR に限らず、プログラムのコードは読みやすさやメンテナンス性を確保するため一定のルールに沿って記載することが勧められています。Rではいくつかの有名なコーディングスタイルのガイドがあります。\n\nGoogle’s R Style Guide\nTidyverse style guide\n\nカッコ類の使い方、1行の文字数、使用するパイプ（magrittr pipe (%&gt;%) vs. base pipe (|&gt;) ）、変数などの命名規則（下記）などが記載されています。全部従うのはなかなか大変ですが、変数名のルールなどは一貫性を持って付けた方が良いです。\n\n\n\n\n\n\n\n\n命名規則\n説明\n採用例\n\n\n\n\nsnake_case\n“_” で小文字の単語をつなぐ\nTidyverse style guide\n\n\ncamelCase\n最初の単語は小文字、2語目以降は単語のはじめを大文字にしてつなぐ\n\n\n\nPascalCase\n(BigCamelCase)\nすべての単語のはじめを大文字にしてつなぐ\nGoogle’s R Style Guide\n\n\ndot.case\n“.” で小文字の単語をつなぐ\n(Rの関数等でよく使われる)\n\n\nkebab-case\n“-” で小文字の単語をつなぐ\n(Rの文法上使えない)\n\n\n\n\n今回は Tidyverse style guide でも使われておりR界隈で使用する人が多い（私見）、小文字の単語を _ でつなぐ snake_case と mJOHNSNOW の講義でこれまでも使われている magrittr pipe (%&gt;%) を使用します。\nちなみに、Tidyverse style guide では base pipe (|&gt;) の機能が充実してきたことから現在は base pipe を使用するように推奨されています（筆者も普段は base pipe 派です）。\nまた、外部関数の名前空間（Rの標準パッケージ以外のパッケージ名）を package::function() で明示することを基本とします（ただしパイプ演算子など一部例外あり）。"
  },
  {
    "objectID": "Data_cleaning_CauseOfDeath_html.html#ファイルの構造",
    "href": "Data_cleaning_CauseOfDeath_html.html#ファイルの構造",
    "title": "Tidyverseを活用したデータ前処理の実践：初級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "2.1 ファイルの構造",
    "text": "2.1 ファイルの構造\nいきなり R で触る前に、まずは Excel などで開いてファイルの中身を俯瞰します。\n\n1-13行目：ファイルの説明\n14-15行目：表の見出し。14行目の「死亡数」と「死亡率」の下に各年が並ぶ\n16行目～：死因別の死亡数・死亡率\n\n16-156行目：総数\n157-297行目：男性\n298-438行目：女性\n\n\n内容としても、整形のためのスペースが多数あったり数値が存在しない部分に色々な記号が使用されたりしている事がわかります。"
  },
  {
    "objectID": "Data_cleaning_CauseOfDeath_html.html#読み込み",
    "href": "Data_cleaning_CauseOfDeath_html.html#読み込み",
    "title": "Tidyverseを活用したデータ前処理の実践：初級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "2.2 読み込み",
    "text": "2.2 読み込み\ntidyverse の一角である readr::read_csv() を使用します。文字コードは Shift-JIS、先頭の解説部分から見出し1行目までの 14行は読み飛ばします。\n\n\nCode\nlibrary(tidyverse)\n\ndata_raw &lt;- readr::read_csv(file   = \"mc130000.csv\", \n                            locale = readr::locale(encoding = \"Shift-JIS\"),\n                            skip   = 14)\n\n\nたくさんメッセージが出ますがここでは省略しています。読み込む際にどのような問題があってどのように変換されたか書かれているので、一度は目を通してみて下さい。\n表部分の見出しは 14-15行目の2行が使われており、14行目にある「死亡数」や「死亡率」を反映していないため重複が発生し、もともとの列番号をつけた列名が付与されています。\n\n\nCode\ndata_raw %&gt;% colnames()\n\n\n [1] \"...1\"      \"1995...2\"  \"2000...3\"  \"2005...4\"  \"2010...5\"  \"2014...6\" \n [7] \"2015...7\"  \"2016...8\"  \"2017...9\"  \"2018...10\" \"2019...11\" \"2020...12\"\n[13] \"2021...13\" \"2022...14\" \"2023...15\" \"1995...16\" \"2000...17\" \"2005...18\"\n[19] \"2010...19\" \"2014...20\" \"2015...21\" \"2016...22\" \"2017...23\" \"2018...24\"\n[25] \"2019...25\" \"2020...26\" \"2021...27\" \"2022...28\" \"2023...29\""
  },
  {
    "objectID": "Data_cleaning_CauseOfDeath_html.html#step1-列名の付け直し処理-1",
    "href": "Data_cleaning_CauseOfDeath_html.html#step1-列名の付け直し処理-1",
    "title": "Tidyverseを活用したデータ前処理の実践：初級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "3.1 Step1: 列名の付け直し【処理 1】",
    "text": "3.1 Step1: 列名の付け直し【処理 1】\nまだ列名を整理していないので、dplyr::select() で列番号を指定して 1-15列目を抽出した後で、dplyr::rename_with() で列名をまとめて扱いやすいよう英数字に付け直します。\nまた、R では数字で始まる変数名は好ましくないので、各年の頭に “Death_” をつけておきます。\n（後で文字列を区切るための目印です。Death@ や単に D_ などでも構いませんが、演算記号を含む Death- や +Death+ は文法上エラーになります）\n\n\n\n\n\n\nImportant\n\n\n\n以降、作業内容がわかるよう可能な限り tidylog パッケージの関数に置き換えています。慣れてきたら適宜 dplyr:: や tidyr:: に戻してください。 library(tidylog) で読み込んでいなければ、tidylog:: を消せば元の tidyverse のものに戻ります。\n\n\n\n\nCode\ndata_step1 &lt;- data_raw %&gt;%\n  tidylog::select(1:15) %&gt;% \n  tidylog::rename_with(\n    ~ c(\"Cause\",\n        paste0(\"Death_\", c(1995, 2000, 2005, 2010, 2014:2023)))\n  )\n## select: dropped 14 variables (1995...16, 2000...17, 2005...18, 2010...19, 2014...20, …)\n## rename_with: renamed 15 variables (Cause, Death_1995, Death_2000, Death_2005, Death_2010, …)\n\n\n\n\n\nCode\nhead(data_step1)    # 内容の確認\n\n\n# A tibble: 6 × 15\n  Cause       Death_1995 Death_2000 Death_2005 Death_2010 Death_2014 Death_2015\n  &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;     \n1 総数        &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;      \n2 　死亡総数… 922139     961653     1083796    1197014    1273025    1290510   \n3 01000 　感… 18925      19858      23538      25863      25569      25241     \n4 01100 　　… 1097       1212       1752       2313       2417       2333      \n5 01200 　　… 3178       2656       2296       2129       2100       1956      \n6 01201 　　… 2986       2461       2086       1880       1836       1723      \n# ℹ 8 more variables: Death_2016 &lt;chr&gt;, Death_2017 &lt;chr&gt;, Death_2018 &lt;chr&gt;,\n#   Death_2019 &lt;chr&gt;, Death_2020 &lt;chr&gt;, Death_2021 &lt;chr&gt;, Death_2022 &lt;chr&gt;,\n#   Death_2023 &lt;chr&gt;"
  },
  {
    "objectID": "Data_cleaning_CauseOfDeath_html.html#step2-死因列causeの整理処理-23",
    "href": "Data_cleaning_CauseOfDeath_html.html#step2-死因列causeの整理処理-23",
    "title": "Tidyverseを活用したデータ前処理の実践：初級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "3.2 Step2: 死因列（Cause）の整理【処理 2+3】",
    "text": "3.2 Step2: 死因列（Cause）の整理【処理 2+3】\n手順は大まかに以下のようになります。\n\n死因と同じ欄にある「総数」、「男」、「女」は性別の見出しなので「性別」列を作って分離\nCause列の数字5桁コード（病名簡単分類）と死因は “_” でつなぐ\n死因「死亡総数」は「00000_死亡総数」とする（e-Stat API のデータに準拠）\n余計な空白は削除する\n最後に 5桁コードと病名を分離する\n\nいくつもの段階を踏むような長いパイプラインは、はじめから全部書かず1段階ずつ確認しながら書いていくことをお勧めします。\nまた、このセクションでは普段の操作で Console に出力される結果をそのまま掲載するために結果の表示の仕方を変えています。\n\n\n\n\n\n\nパイプの途中経過を確認したいとき\n\n\n\n既にある長いパイプラインのコードの動作を確認したいときは、%&gt;% の後に return() 関数をつなぐことでそこまでで一旦終了としてその段階の結果を確認することが出来ます。（なお、base pipe では |&gt; return() を使うことは出来ません）。\n\n\n\n\n\n\n\n\n頻出関数 stringr::str_replace_all(string, pattern, replacement)\n\n\n\n\n文字列 string 中の pattern に当てはまる部分を replacement に置き換える\npattern にはワイルドカード・正規表現が使用可能\n\nString manipulation with stringr :: CHEATSHEET （注：リンク先はPDF）2ページ目の一覧を参照\n\npattern 中で () で囲むことで、replacement の中で登場順に \\\\1, \\\\2, … で引用可能\nおもに dplyr::mutate() の中で使われる\n\n\n\n\n\n3.2.1 性別列を作って分離\n\n\nCode\ndata_step2_1 &lt;- data_step1 %&gt;% \n  # 性別列を作る\n  tidylog::mutate(\n    # 死因列の空白より後ろを削除すると、「総数」「男」「女」以外は空か数字のみになる\n    Sex = stringr::str_replace_all(Cause, \"\\\\s.*$\", \"\"),\n    # 数字も削除すると、Sexは「総数」「男」「女」しか残らない\n    Sex = stringr::str_replace_all(Sex, \"\\\\d+\", \"\"),\n    # 空になった行は NA_character_（NAの文字列型）＝空欄に置き換える\n    Sex = dplyr::if_else(Sex == '', NA_character_, Sex),\n    # 説明用に、性別列を死因列の次につくる（特に指定しないと末尾になる）\n    .after = \"Cause\"\n  )\n## mutate: new variable 'Sex' (character) with 4 unique values and 99% NA\n\n\n\n\nCode\ndata_step2_1\n## # A tibble: 423 × 16\n##    Cause Sex   Death_1995 Death_2000 Death_2005 Death_2010 Death_2014 Death_2015\n##    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;     \n##  1 総数  総数  &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;      \n##  2 　死… &lt;NA&gt;  922139     961653     1083796    1197014    1273025    1290510   \n##  3 0100… &lt;NA&gt;  18925      19858      23538      25863      25569      25241     \n##  4 0110… &lt;NA&gt;  1097       1212       1752       2313       2417       2333      \n##  5 0120… &lt;NA&gt;  3178       2656       2296       2129       2100       1956      \n##  6 0120… &lt;NA&gt;  2986       2461       2086       1880       1836       1723      \n##  7 0120… &lt;NA&gt;  192        195        210        249        264        233       \n##  8 0130… &lt;NA&gt;  4905       6216       8504       10676      11279      11357     \n##  9 0140… &lt;NA&gt;  5029       5121       6042       5614       4747       4514      \n## 10 0140… &lt;NA&gt;  880        885        786        539        482        407       \n## # ℹ 413 more rows\n## # ℹ 8 more variables: Death_2016 &lt;chr&gt;, Death_2017 &lt;chr&gt;, Death_2018 &lt;chr&gt;,\n## #   Death_2019 &lt;chr&gt;, Death_2020 &lt;chr&gt;, Death_2021 &lt;chr&gt;, Death_2022 &lt;chr&gt;,\n## #   Death_2023 &lt;chr&gt;\n\n\n\n\nCode\ndata_step2_2 &lt;- data_step2_1 %&gt;% \n  # Sex列の空欄を下向きに埋めた後、実死亡数がない行＝もともと性別のみ書かれていた行を消す\n  tidylog::fill(Sex, .direction = \"down\") %&gt;% \n  tidylog::drop_na(Death_2023)\n## fill: changed 420 values (99%) of 'Sex' (420 fewer NAs)\n## drop_na: removed 3 rows (1%), 420 rows remaining\n\n\n\n\n\nCode\ndata_step2_2\n## # A tibble: 420 × 16\n##    Cause Sex   Death_1995 Death_2000 Death_2005 Death_2010 Death_2014 Death_2015\n##    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;     \n##  1 　死… 総数  922139     961653     1083796    1197014    1273025    1290510   \n##  2 0100… 総数  18925      19858      23538      25863      25569      25241     \n##  3 0110… 総数  1097       1212       1752       2313       2417       2333      \n##  4 0120… 総数  3178       2656       2296       2129       2100       1956      \n##  5 0120… 総数  2986       2461       2086       1880       1836       1723      \n##  6 0120… 総数  192        195        210        249        264        233       \n##  7 0130… 総数  4905       6216       8504       10676      11279      11357     \n##  8 0140… 総数  5029       5121       6042       5614       4747       4514      \n##  9 0140… 総数  880        885        786        539        482        407       \n## 10 0140… 総数  3542       3756       4855       4754       4033       3881      \n## # ℹ 410 more rows\n## # ℹ 8 more variables: Death_2016 &lt;chr&gt;, Death_2017 &lt;chr&gt;, Death_2018 &lt;chr&gt;,\n## #   Death_2019 &lt;chr&gt;, Death_2020 &lt;chr&gt;, Death_2021 &lt;chr&gt;, Death_2022 &lt;chr&gt;,\n## #   Death_2023 &lt;chr&gt;\n\n\n\n\n3.2.2 病名（Cause）列の数字5桁コードと死因を “_” でつなぐ\n\n\nCode\ndata_step2_3 &lt;- data_step2_2 %&gt;% \n  # 死因簡単分類の整理\n  tidylog::mutate(\n    # 空白を全部消す\n    Cause = stringr::str_replace_all(Cause, \"\\\\s*\", \"\"),\n    # 死亡総数は 00000_ をつける。それ以外は先頭の連続した数字のあとに _ をつける\n    Cause = dplyr::if_else(Cause == \"死亡総数\",\n                           \"00000_死亡総数\",\n                           stringr::str_replace_all(Cause, \"^(\\\\d+)\", \"\\\\1_\"))\n  )\n## mutate: changed 420 values (100%) of 'Cause' (0 new NAs)\n\n\n\n\nCode\ndata_step2_3 %&gt;% select(Cause)\n## # A tibble: 420 × 1\n##    Cause                   \n##    &lt;chr&gt;                   \n##  1 00000_死亡総数          \n##  2 01000_感染症及び寄生虫症\n##  3 01100_腸管感染症        \n##  4 01200_結核              \n##  5 01201_呼吸器結核        \n##  6 01202_その他の結核      \n##  7 01300_敗血症            \n##  8 01400_ウイルス性肝炎    \n##  9 01401_Ｂ型ウイルス性肝炎\n## 10 01402_Ｃ型ウイルス性肝炎\n## # ℹ 410 more rows\n\n\n\n\n3.2.3 死因の5桁コードと病名を分離して並べ替える\n\n\nCode\ndata_step2_4 &lt;- data_step2_3 %&gt;% \n  # コードと病名を分離する\n  tidylog::mutate(\n    Cause_Code = stringr::str_split(Cause, \"_\", simplify = TRUE)[,1],\n    Cause_Name = stringr::str_split(Cause, \"_\", simplify = TRUE)[,2]\n  ) %&gt;% \n  # 必要な項目を並べ替え\n  tidylog::select(Cause_Code, Cause_Name, Sex, starts_with(\"Death_\"))\n## mutate: new variable 'Cause_Code' (character) with 140 unique values and 0% NA\n##         new variable 'Cause_Name' (character) with 140 unique values and 0% NA\n## select: dropped one variable (Cause)\n\n\n\n\nCode\ndata_step2_4\n## # A tibble: 420 × 17\n##    Cause_Code Cause_Name      Sex   Death_1995 Death_2000 Death_2005 Death_2010\n##    &lt;chr&gt;      &lt;chr&gt;           &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;     \n##  1 00000      死亡総数        総数  922139     961653     1083796    1197014   \n##  2 01000      感染症及び寄生… 総数  18925      19858      23538      25863     \n##  3 01100      腸管感染症      総数  1097       1212       1752       2313      \n##  4 01200      結核            総数  3178       2656       2296       2129      \n##  5 01201      呼吸器結核      総数  2986       2461       2086       1880      \n##  6 01202      その他の結核    総数  192        195        210        249       \n##  7 01300      敗血症          総数  4905       6216       8504       10676     \n##  8 01400      ウイルス性肝炎  総数  5029       5121       6042       5614      \n##  9 01401      Ｂ型ウイルス性… 総数  880        885        786        539       \n## 10 01402      Ｃ型ウイルス性… 総数  3542       3756       4855       4754      \n## # ℹ 410 more rows\n## # ℹ 10 more variables: Death_2014 &lt;chr&gt;, Death_2015 &lt;chr&gt;, Death_2016 &lt;chr&gt;,\n## #   Death_2017 &lt;chr&gt;, Death_2018 &lt;chr&gt;, Death_2019 &lt;chr&gt;, Death_2020 &lt;chr&gt;,\n## #   Death_2021 &lt;chr&gt;, Death_2022 &lt;chr&gt;, Death_2023 &lt;chr&gt;\n\n\n\n\n\n3.2.4 まとめて処理\n少しずつ確認しながら進めてきた操作をひとまとめにします。（ここは tidylog:: ではなく元の関数で示します）\n\n\nCode\ndata_step2 &lt;- data_step1 %&gt;% \n  # 性別列を作る\n  dplyr::mutate(\n    # 死因列の空白より後ろを削除すると、「総数」「男」「女」以外は空か数字のみになる\n    Sex = stringr::str_replace_all(Cause, \"\\\\s.*$\", \"\"),\n    # 数字も削除すると、Sexは「総数」「男」「女」しか残らない\n    Sex = stringr::str_replace_all(Sex, \"\\\\d+\", \"\"),\n    # 空になった行は NA_character_（NAの文字列型）＝空欄に置き換える\n    Sex = dplyr::if_else(Sex == '', NA_character_, Sex),\n  ) %&gt;% \n  # Sex列の空欄を下向きに埋めた後、実死亡数がない行＝もともと性別のみ書かれていた行を消す\n  tidyr::fill(Sex, .direction = \"down\") %&gt;% \n  tidyr::drop_na(Death_2023) %&gt;% \n  # 死因簡単分類の整理\n  dplyr::mutate(\n    # 空白を全部消す\n    Cause = stringr::str_replace_all(Cause, \"\\\\s*\", \"\"),\n    # 死亡総数は 00000_ をつける。それ以外は先頭の連続した数字のあとに _ をつける\n    Cause = dplyr::if_else(Cause == \"死亡総数\",\n                           \"00000_死亡総数\",\n                           stringr::str_replace_all(Cause, \"^(\\\\d+)\", \"\\\\1_\"))\n  ) %&gt;% \n  # コードと病名を分離する\n  dplyr::mutate(\n    Cause_Code = stringr::str_split(Cause, \"_\", simplify = TRUE)[,1],\n    Cause_Name = stringr::str_split(Cause, \"_\", simplify = TRUE)[,2]\n  ) %&gt;% \n  # 必要な項目を並べ替え\n  dplyr::select(Cause_Code, Cause_Name, Sex, starts_with(\"Death_\"))\n\nhead(data_step2)  # 確認\n\n\n# A tibble: 6 × 17\n  Cause_Code Cause_Name        Sex   Death_1995 Death_2000 Death_2005 Death_2010\n  &lt;chr&gt;      &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;     \n1 00000      死亡総数          総数  922139     961653     1083796    1197014   \n2 01000      感染症及び寄生虫… 総数  18925      19858      23538      25863     \n3 01100      腸管感染症        総数  1097       1212       1752       2313      \n4 01200      結核              総数  3178       2656       2296       2129      \n5 01201      呼吸器結核        総数  2986       2461       2086       1880      \n6 01202      その他の結核      総数  192        195        210        249       \n# ℹ 10 more variables: Death_2014 &lt;chr&gt;, Death_2015 &lt;chr&gt;, Death_2016 &lt;chr&gt;,\n#   Death_2017 &lt;chr&gt;, Death_2018 &lt;chr&gt;, Death_2019 &lt;chr&gt;, Death_2020 &lt;chr&gt;,\n#   Death_2021 &lt;chr&gt;, Death_2022 &lt;chr&gt;, Death_2023 &lt;chr&gt;"
  },
  {
    "objectID": "Data_cleaning_CauseOfDeath_html.html#step3-死亡数を数値として扱えるようにする処理-4",
    "href": "Data_cleaning_CauseOfDeath_html.html#step3-死亡数を数値として扱えるようにする処理-4",
    "title": "Tidyverseを活用したデータ前処理の実践：初級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "3.3 Step3: 死亡数を数値として扱えるようにする【処理 4】",
    "text": "3.3 Step3: 死亡数を数値として扱えるようにする【処理 4】\n\n\nCode\ndplyr::glimpse(data_step2)      # 各列の型を確認\n\n\nRows: 420\nColumns: 17\n$ Cause_Code &lt;chr&gt; \"00000\", \"01000\", \"01100\", \"01200\", \"01201\", \"01202\", \"0130…\n$ Cause_Name &lt;chr&gt; \"死亡総数\", \"感染症及び寄生虫症\", \"腸管感染症\", \"結核\", \"呼…\n$ Sex        &lt;chr&gt; \"総数\", \"総数\", \"総数\", \"総数\", \"総数\", \"総数\", \"総数\", \"総…\n$ Death_1995 &lt;chr&gt; \"922139\", \"18925\", \"1097\", \"3178\", \"2986\", \"192\", \"4905\", \"…\n$ Death_2000 &lt;chr&gt; \"961653\", \"19858\", \"1212\", \"2656\", \"2461\", \"195\", \"6216\", \"…\n$ Death_2005 &lt;chr&gt; \"1083796\", \"23538\", \"1752\", \"2296\", \"2086\", \"210\", \"8504\", …\n$ Death_2010 &lt;chr&gt; \"1197014\", \"25863\", \"2313\", \"2129\", \"1880\", \"249\", \"10676\",…\n$ Death_2014 &lt;chr&gt; \"1273025\", \"25569\", \"2417\", \"2100\", \"1836\", \"264\", \"11279\",…\n$ Death_2015 &lt;chr&gt; \"1290510\", \"25241\", \"2333\", \"1956\", \"1723\", \"233\", \"11357\",…\n$ Death_2016 &lt;chr&gt; \"1308158\", \"25107\", \"2551\", \"1893\", \"1663\", \"230\", \"11512\",…\n$ Death_2017 &lt;chr&gt; \"1340567\", \"24760\", \"2358\", \"2306\", \"2002\", \"304\", \"10213\",…\n$ Death_2018 &lt;chr&gt; \"1362470\", \"24127\", \"2363\", \"2204\", \"1939\", \"265\", \"10312\",…\n$ Death_2019 &lt;chr&gt; \"1381093\", \"23544\", \"2267\", \"2087\", \"1801\", \"286\", \"10217\",…\n$ Death_2020 &lt;chr&gt; \"1372755\", \"22129\", \"2153\", \"1909\", \"1664\", \"245\", \"9801\", …\n$ Death_2021 &lt;chr&gt; \"1439856\", \"22160\", \"1949\", \"1845\", \"1570\", \"275\", \"9989\", …\n$ Death_2022 &lt;chr&gt; \"1569050\", \"23726\", \"2037\", \"1664\", \"1423\", \"241\", \"11346\",…\n$ Death_2023 &lt;chr&gt; \"1576016\", \"24237\", \"2137\", \"1587\", \"1344\", \"243\", \"11619\",…\n\n\n男性の婦人科癌など値がない病名については「・」や「-」などで埋められているため、本来数値であるはずの Death_**** がすべて “chr” つまり文字列扱いになっており、それを数値に変換します。\n\n\nCode\ndata_step3 &lt;- data_step2 %&gt;% \n  # Death_1995 列から Death_2023 列にそれぞれ as.integer() を適用する\n  tidylog::mutate(dplyr::across(Death_1995:Death_2023, as.integer))\n## Warning: There were 14 warnings in `.fun()`.\n## The first warning was:\n## ℹ In argument: `dplyr::across(Death_1995:Death_2023, as.integer)`.\n## Caused by warning:\n## !  強制変換により NA が生成されました \n## ℹ Run `dplyr::last_dplyr_warnings()` to see the 13 remaining warnings.\n## mutate: converted 'Death_1995' from character to integer (23 new NA)\n##         converted 'Death_2000' from character to integer (22 new NA)\n##         converted 'Death_2005' from character to integer (23 new NA)\n##         converted 'Death_2010' from character to integer (23 new NA)\n##         converted 'Death_2014' from character to integer (22 new NA)\n##         converted 'Death_2015' from character to integer (22 new NA)\n##         converted 'Death_2016' from character to integer (23 new NA)\n##         converted 'Death_2017' from character to integer (23 new NA)\n##         converted 'Death_2018' from character to integer (22 new NA)\n##         converted 'Death_2019' from character to integer (23 new NA)\n##         converted 'Death_2020' from character to integer (13 new NA)\n##         converted 'Death_2021' from character to integer (11 new NA)\n##         converted 'Death_2022' from character to integer (11 new NA)\n##         converted 'Death_2023' from character to integer (11 new NA)\n\n\n\n\nCode\ndplyr::glimpse(data_step3)\n\n\nRows: 420\nColumns: 17\n$ Cause_Code &lt;chr&gt; \"00000\", \"01000\", \"01100\", \"01200\", \"01201\", \"01202\", \"0130…\n$ Cause_Name &lt;chr&gt; \"死亡総数\", \"感染症及び寄生虫症\", \"腸管感染症\", \"結核\", \"呼…\n$ Sex        &lt;chr&gt; \"総数\", \"総数\", \"総数\", \"総数\", \"総数\", \"総数\", \"総数\", \"総…\n$ Death_1995 &lt;int&gt; 922139, 18925, 1097, 3178, 2986, 192, 4905, 5029, 880, 3542…\n$ Death_2000 &lt;int&gt; 961653, 19858, 1212, 2656, 2461, 195, 6216, 5121, 885, 3756…\n$ Death_2005 &lt;int&gt; 1083796, 23538, 1752, 2296, 2086, 210, 8504, 6042, 786, 485…\n$ Death_2010 &lt;int&gt; 1197014, 25863, 2313, 2129, 1880, 249, 10676, 5614, 539, 47…\n$ Death_2014 &lt;int&gt; 1273025, 25569, 2417, 2100, 1836, 264, 11279, 4747, 482, 40…\n$ Death_2015 &lt;int&gt; 1290510, 25241, 2333, 1956, 1723, 233, 11357, 4514, 407, 38…\n$ Death_2016 &lt;int&gt; 1308158, 25107, 2551, 1893, 1663, 230, 11512, 3851, 407, 32…\n$ Death_2017 &lt;int&gt; 1340567, 24760, 2358, 2306, 2002, 304, 10213, 3743, 419, 31…\n$ Death_2018 &lt;int&gt; 1362470, 24127, 2363, 2204, 1939, 265, 10312, 3055, 368, 24…\n$ Death_2019 &lt;int&gt; 1381093, 23544, 2267, 2087, 1801, 286, 10217, 2657, 336, 21…\n$ Death_2020 &lt;int&gt; 1372755, 22129, 2153, 1909, 1664, 245, 9801, 2201, 353, 168…\n$ Death_2021 &lt;int&gt; 1439856, 22160, 1949, 1845, 1570, 275, 9989, 1943, 337, 143…\n$ Death_2022 &lt;int&gt; 1569050, 23726, 2037, 1664, 1423, 241, 11346, 1799, 353, 12…\n$ Death_2023 &lt;int&gt; 1576016, 24237, 2137, 1587, 1344, 243, 11619, 1645, 350, 11…"
  },
  {
    "objectID": "Data_cleaning_CauseOfDeath_html.html#step4-年も数値にする処理-4tidy-data-に整形する処理-5",
    "href": "Data_cleaning_CauseOfDeath_html.html#step4-年も数値にする処理-4tidy-data-に整形する処理-5",
    "title": "Tidyverseを活用したデータ前処理の実践：初級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "3.4 Step4: 年も数値にする【処理 4】＋Tidy data に整形する【処理 5】",
    "text": "3.4 Step4: 年も数値にする【処理 4】＋Tidy data に整形する【処理 5】\ntidyr::pivot_longer() で年代が縦に並ぶ縦長の表に変形し、あわせて年も数値として扱えるようにします。\n\n\n\n\n\n\ntidyr::pivot_longer() / pivot_wider()\n\n\n\n表を1例1行形式の横持ち（wide）と解析に使いやすい縦持ち（long）に相互に変換する重要関数です。 詳細は、Data tidying with tidyr :: CHEATSHEET （注：リンク先はPDF）の Reshape Data セクションの図を見てください。\n\n\n\n\nCode\ndata_step4_long &lt;- data_step3 %&gt;% \n  tidylog::pivot_longer(\n    cols            = dplyr::starts_with(\"Death_\"),   # Death_**** の列を変換対象にする\n    names_to        = \"Year\",                         # 対象列の見出しを Year 列に格納  \n    names_prefix    = \"Death_\",                       #   その際に冒頭の \"Death_\" は除く\n    names_transform = as.integer,                     #   年は整数として扱えるようにする \n    values_to       = \"Death\"                         # 対象列の値（死亡数）は Death 列に格納\n  )\n## pivot_longer: reorganized (Death_1995, Death_2000, Death_2005, Death_2010,\n## Death_2014, …) into (Year, Death) [was 420x17, now 5880x5]\n\n\n\n\nCode\nhead(data_step4_long, n = 8)\n\n\n# A tibble: 8 × 5\n  Cause_Code Cause_Name Sex    Year   Death\n  &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt; &lt;int&gt;   &lt;int&gt;\n1 00000      死亡総数   総数   1995  922139\n2 00000      死亡総数   総数   2000  961653\n3 00000      死亡総数   総数   2005 1083796\n4 00000      死亡総数   総数   2010 1197014\n5 00000      死亡総数   総数   2014 1273025\n6 00000      死亡総数   総数   2015 1290510\n7 00000      死亡総数   総数   2016 1308158\n8 00000      死亡総数   総数   2017 1340567\n\n\nこのままでは、Sex列に男女別の値と総数という意味がやや異なるデータが混在しているので、Sex列を横に展開します。（総数の表と男女の表の2つに分割しても tidy data と言えるでしょう）\n\n\nCode\ndata_step4_wide &lt;- data_step4_long %&gt;% \n  tidylog::pivot_wider(\n    names_from  = \"Sex\",     # 新たな列名にするのは Sex\n    values_from = \"Death\"    # (Cause + Year) x Sex に対応する死因をいれる\n  ) %&gt;% \n  tidylog::rename(Total = 総数, Male = 男, Female = 女)    # 列名を英数化\n## pivot_wider: reorganized (Sex, Death) into (総数, 男, 女) [was 5880x5, now 1960x6]\n## rename: renamed 3 variables (Total, Male, Female)\n\n\n\n\nCode\nhead(data_step4_wide, n = 10)\n\n\n# A tibble: 10 × 6\n   Cause_Code Cause_Name  Year   Total   Male Female\n   &lt;chr&gt;      &lt;chr&gt;      &lt;int&gt;   &lt;int&gt;  &lt;int&gt;  &lt;int&gt;\n 1 00000      死亡総数    1995  922139 501276 420863\n 2 00000      死亡総数    2000  961653 525903 435750\n 3 00000      死亡総数    2005 1083796 584970 498826\n 4 00000      死亡総数    2010 1197014 633701 563313\n 5 00000      死亡総数    2014 1273025 660340 612685\n 6 00000      死亡総数    2015 1290510 666728 623782\n 7 00000      死亡総数    2016 1308158 674946 633212\n 8 00000      死亡総数    2017 1340567 690770 649797\n 9 00000      死亡総数    2018 1362470 699138 663332\n10 00000      死亡総数    2019 1381093 707421 673672\n\n\nこれで tidy data の要件を満たす状態となりましたが、解析については内容によっては Step3 のデータの方が扱いやすい場合もあります。"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mJOHNSNOW R解析Peer勉強会 vol.4",
    "section": "",
    "text": "Tidyverse を活用したデータ前処理の実践"
  },
  {
    "objectID": "index.html#r-packages",
    "href": "index.html#r-packages",
    "title": "mJOHNSNOW R解析Peer勉強会 vol.4",
    "section": "R packages",
    "text": "R packages\nmJOHNSNOW 「Rでデータ解析講座」の基本セットに含まれないパッケージとして、以下のものを使用します。\n\ntidylog\nopenxlsx\ngtsummary の機能に付随して、broom.helpers など\n\n上記を個別または下記を参考にインストールしておいてください。\n\n# 並列ダウンロード、インストール済パッケージのスキップなど可能な pak を使用\nif (!(\"pak\" %in% installed.packages()[,\"Package\"])) {\n  install.packages(\"pak\")\n}\n\n# mJOHNSNOW Rでデータ解析講座 の基本セットに含まれないパッケージ\npak::pkg_install(\"tidylog\")\n\n# gtsummary は追加的機能（Suggests）も含めてインストールし直す\n# この中に openxlsx, broom.helpers など今回必要になるものも含まれる\npak::pkg_install(\"gtsummary\", dependencies = TRUE)"
  },
  {
    "objectID": "index.html#データ",
    "href": "index.html#データ",
    "title": "mJOHNSNOW R解析Peer勉強会 vol.4",
    "section": "データ",
    "text": "データ\n\n前半（初級編）\n厚生労働省 人口動態統計 より、2023年の死因別死亡数のデータを使用します。\nhttps://www.e-stat.go.jp/stat-search/files?tclass=000001041646&cycle=7&year=20230\nより、「5-13 死因（死因簡単分類）別にみた性・年次別死亡数及び死亡率（人口10万対）/ 2023年」（公開日 2024-09-17）の CSVファイル（mc130000.csv）を Working Directory にダウンロードして下さい。\n\n\n後半（中級編）\n間質性肺炎の多施設レジストリ研究をイメージした模擬データを使用します。\nこちら から「ip_registry_data.xlsx」を Working Directory にダウンロードして下さい。\n\nn = 400\n観察期間は10年\n登録時に加えて、1, 3, 5年後の経過データ\n\n一旦作成した模擬データに、あえてノイズを加えたものを配布データとしています。"
  },
  {
    "objectID": "index.html#コード",
    "href": "index.html#コード",
    "title": "mJOHNSNOW R解析Peer勉強会 vol.4",
    "section": "コード",
    "text": "コード\nHTML document 形式のレポートを作成する Quarto 形式（.qmd）でコードを準備しました。時間が足りなくなりそうなので説明を多めに記載してあります。\nこちらも上記データと同じ Working Directory にダウンロードして下さい。\n\n初級編（人口動態統計データの処理）\n\nRender済の HTML document\nほぼ同じソースから出力した PDF file\n\n中級編（多施設レジストリ研究の模擬データの処理）\n\nRender済の HTML document\nほぼ同じソースから出力した PDF file"
  },
  {
    "objectID": "index.html#資料",
    "href": "index.html#資料",
    "title": "mJOHNSNOW R解析Peer勉強会 vol.4",
    "section": "資料",
    "text": "資料\nPosit社の Cheat Sheet 集\n\nstringr\ntidyr\ndplyr"
  },
  {
    "objectID": "index.html#パイプ演算子の挙動",
    "href": "index.html#パイプ演算子の挙動",
    "title": "mJOHNSNOW R解析Peer勉強会 vol.4",
    "section": "パイプ演算子の挙動",
    "text": "パイプ演算子の挙動\nパイプ演算子は magritter pipe (%&gt;%) も base pipe (|&gt;) も パイプの右側の関数の1つ目のパラメーター（引数）に左側を挿入し、元々あった引数を1つずつ後ろにずらす のが基本動作となります。\nR の関数に渡される引数は、\n\n引数名を指定した場合は、指定した引数に値が割り当てられる\n引数名を書かないものは、関数定義の順に当てはめられる\n\nのルールで決まりますが、パイプ演算子は原則として「引数名を書かないもの」の一番最初に挿入されます。\nこの挙動により、パイプを受け取る側の関数で指定していた引数が想定したものとズレてしまいエラーになることがあります。できるだけ、パイプを使用した記載のときは引数名を省略せずに記載するようにした方が安全です。\n（下記のサンプルコードは、base pipe の方が分かりやすいのでここだけ base pipe を使います）\n\n# match.call() は関数がどのように呼び出されたかを表示する\nf &lt;- function(x, y, z, ...) match.call()\n\n# g() は y が数値でないとエラーになる関数として作成\ng &lt;- function(x, y = 1, z, ...) {\n  if (!is.numeric(y)) message(\"ERROR: 'y' must be numeric.\")\n  match.call()\n}\n\ndata &lt;- data.frame()\n\n# パラメーター（引数）名を書かないと関数定義の順に当てはめられる\nf(\"p1\", \"p2\", \"p3\")\n## f(x = \"p1\", y = \"p2\", z = \"p3\")\n\n# 引数名を指定すると、記載順にかかわらず指定した引数に割り当てられる\nf(z = \"p1\", y = \"p2\", \"p3\")\n## f(x = \"p3\", y = \"p2\", z = \"p1\")\n\n# 引数名を指定せずパイプで受け渡す場合\n# &gt; ひとつめの引数に挿入され、元々あったものはひとつずつずれる\nf(\"param\", \"this is 'y'\")\n## f(x = \"param\", y = \"this is 'y'\")\ndata |&gt; f(\"param\", \"is this 'y'?\")\n## f(x = data, y = \"param\", z = \"is this 'y'?\")\n\ndata |&gt; f(\"p1\") |&gt; g(\"p2\", 123)\n## ERROR: 'y' must be numeric.\n## g(x = f(data, \"p1\"), y = \"p2\", z = 123)\n\n# ズレないためには引数名を指定する\n# &gt; パイプの左側は指定されていない一番最初の引数に挿入される\ndata |&gt; f(x = \"this must be 'x'\")\n## f(x = \"this must be 'x'\", y = data)\n\n# パイプの左側を反映する引数を指定する場合は placeholder を使う\n# &gt; . (magritter pipe) or _ (base pipe)\ndata |&gt; f(\"param\", z = _)\n## f(x = \"param\", z = data)"
  },
  {
    "objectID": "index.html#模擬データの作成コード",
    "href": "index.html#模擬データの作成コード",
    "title": "mJOHNSNOW R解析Peer勉強会 vol.4",
    "section": "模擬データの作成コード",
    "text": "模擬データの作成コード\nGithub repository の script ディレクトリにあります。興味ある方は上の Github リンクから御覧ください。\n意図的なノイズを加えた Excel ファイルにする前の full data CSV"
  },
  {
    "objectID": "index.html#typst-pdf-と-html-document-の共存",
    "href": "index.html#typst-pdf-と-html-document-の共存",
    "title": "mJOHNSNOW R解析Peer勉強会 vol.4",
    "section": "Typst-PDF と HTML document の共存",
    "text": "Typst-PDF と HTML document の共存\nQuarto で同じソースから HTML document と Typst による PDF の両方を作成する実験をしました。上記配布コードはそこから Typst の設定を除いて HTML document 専用にしたものです。\nTypst は最近では Quarto に同梱されており（Quarto 自体が RStudio に同梱されています）、TeX環境を構築せずとも高品質の PDF レポートが作成できるようになりました。\nTypst の文法・設定はあまり理解できておらず見様見真似です。\nWindows と Ubuntu linux（rocker/rstudio ベースの Docker 環境）では確認しましたが macOS の環境がないためフォント不足などでエラーとなる可能性は大いにあります。また改ページは Windows 上で出力した Typst-PDF にあわせています。\n\n初級編（人口動態統計データの処理）\n中級編（多施設レジストリ研究の模擬データの処理）"
  },
  {
    "objectID": "Data_cleaning_IPRegistry_html.html#実際の読み込み",
    "href": "Data_cleaning_IPRegistry_html.html#実際の読み込み",
    "title": "Tidyverseを活用したデータ前処理の実践：中級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "2.1 実際の読み込み",
    "text": "2.1 実際の読み込み\n\n\nCode\n# Excelファイルのシート名を確認（読み込み時は名前でもシート番号でも可）\nreadxl::excel_sheets(\"ip_registry_data.xlsx\")\n## [1] \"症例登録票\" \"アウトカム\"\n\n# シート1「症例登録票」はまずそのまま読み込む\ndata_raw_sheet1 &lt;- readxl::read_xlsx(\"ip_registry_data.xlsx\", sheet = 1)\n\n# シート2「アウトカム」はそのまま読み込むと扱いにくい\nreadxl::read_xlsx(\"ip_registry_data.xlsx\", sheet = 2) %&gt;% head()\n## # A tibble: 6 × 17\n##   ...1     ...2  ...3  ...4  ...5  `1年後` ...7  ...8  ...9  `3年後` ...11 ...12\n##   &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;\n## 1 登録番号 施設  施設… 転帰… \"転…  KL6     FVC   FEV1  %DLco KL6     FVC   FEV1 \n## 2 1        大学… 1     45162 \"0\"   1060    2.02… 1.62  74.7  1142    1.55  1.45 \n## 3 2        大学… 2     41647 \"1\"   &lt;NA&gt;    &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;    &lt;NA&gt;  &lt;NA&gt; \n## 4 4        大学… 3     45053 \"0\"   522     2.45… 2.43… 110.7 561     2.33  2.29 \n## 5 5        大学… 4     45318 \"0\"   1227    2.24… 1.8   64.2  &lt;NA&gt;    1.81  1.43 \n## 6 7        大学… 5     45335 \"0\"   919     2.39  1.96  &lt;NA&gt;  1005    2.11  1.81 \n## # ℹ 5 more variables: ...13 &lt;chr&gt;, `5年後` &lt;chr&gt;, ...15 &lt;chr&gt;, ...16 &lt;chr&gt;,\n## #   ...17 &lt;chr&gt;\n\n# 見出しの2行目がデータの1行目として読み込まれるので、すべて文字列型 &lt;chr&gt; になる\n# そこで、最初の2行と3行目以降に分けて読み込むことにする\n\ndata_raw_sheet2_names &lt;- readxl::read_xlsx(\"ip_registry_data.xlsx\", sheet = 2,\n                                           n_max     = 2,         # 最初から2行を読み込む\n                                           col_names = FALSE,     # 1行目を見出しとしない\n                                           col_types = \"text\")    # すべて文字列で読み込む\ndata_raw_sheet2_names\n## # A tibble: 2 × 17\n##   ...1  ...2  ...3   ...4  ...5  ...6  ...7  ...8  ...9  ...10 ...11 ...12 ...13\n##   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n## 1 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt; 1年後 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  3年後 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n## 2 登録… 施設  施設ID 転帰… \"転…  KL6   FVC   FEV1  %DLco KL6   FVC   FEV1  %DLco\n## # ℹ 4 more variables: ...14 &lt;chr&gt;, ...15 &lt;chr&gt;, ...16 &lt;chr&gt;, ...17 &lt;chr&gt;\n\ndata_raw_sheet2_body  &lt;- readxl::read_xlsx(\"ip_registry_data.xlsx\", sheet = 2,\n                                           # 最初の2行を読み飛ばす\n                                           skip      = 2,\n                                           # 1行目を見出しとせず、A-Qの列名を使う\n                                           col_names = openxlsx::int2col(1:17))\ndata_raw_sheet2_body\n## # A tibble: 400 × 17\n##        A B            C D                       E     F     G     H     I     J\n##    &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dttm&gt;              &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1     1 大学病院     1 2023-08-24 00:00:00     0  1060  2.03  1.62  74.7  1142\n##  2     2 大学病院     2 2014-01-08 00:00:00     1    NA NA    NA     NA      NA\n##  3     4 大学病院     3 2023-05-07 00:00:00     0   522  2.45  2.43 111.    561\n##  4     5 大学病院     4 2024-01-27 00:00:00     0  1227  2.24  1.8   64.2    NA\n##  5     7 大学病院     5 2024-02-13 00:00:00     0   919  2.39  1.96  NA    1005\n##  6     8 大学病院     6 2013-11-15 00:00:00     1    NA NA    NA     NA      NA\n##  7    12 大学病院     7 2024-02-07 00:00:00     0   762  1.87  1.78  56.9   925\n##  8    15 大学病院     8 2024-03-19 00:00:00     0   625  2.75  2.32  85.1   714\n##  9    17 大学病院     9 2024-01-22 00:00:00     0   692  3.58  2.78  94.1   499\n## 10    19 大学病院    10 2023-05-18 00:00:00     0  1878  2.5   1.69  64.7  3059\n## # ℹ 390 more rows\n## # ℹ 7 more variables: K &lt;dbl&gt;, L &lt;dbl&gt;, M &lt;dbl&gt;, N &lt;dbl&gt;, O &lt;dbl&gt;, P &lt;dbl&gt;,\n## #   Q &lt;dbl&gt;"
  },
  {
    "objectID": "Data_cleaning_IPRegistry_html.html#データ整形の方針",
    "href": "Data_cleaning_IPRegistry_html.html#データ整形の方針",
    "title": "Tidyverseを活用したデータ前処理の実践：中級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "3.1 データ整形の方針",
    "text": "3.1 データ整形の方針\n\n列名はRで扱いやすい英単語ベースに改名する\n4回登場する KL6, FVC, FEV1, %DLco は時期を区別できるよう工夫する\n2つのシートは「登録番号」をキーにして連結する\n日付データが整数値（Excelのシリアル値）になっていたら日付に再変換が必要\n観察期間がないので 「転帰日 – 登録日」で求める\n合併症は、「糖尿病」 「不整脈」 「高血圧」 それぞれの有無に分解する\n誤差が生じている数値は小数点以下の桁数を揃えて丸める\n入力間違いによる外れ値がないか確認"
  },
  {
    "objectID": "Data_cleaning_IPRegistry_html.html#列名の整理",
    "href": "Data_cleaning_IPRegistry_html.html#列名の整理",
    "title": "Tidyverseを活用したデータ前処理の実践：中級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "3.2 列名の整理",
    "text": "3.2 列名の整理\nR で扱いやすいよう、英単語ベース（複数単語なら snake_case 方式）の変数名に改名します。\n4回登場する KL6, FVC, FEV1, %DLco は時期を区別できるよう後に「_(0,1,3,5)y」とつけることにします。\n\n\nCode\n# 「症例登録票」のデータ\nnames(data_raw_sheet1)\n##  [1] \"登録番号\"   \"施設\"       \"施設ID\"     \"登録日\"     \"性別\"      \n##  [6] \"登録時年齢\" \"生年月日\"   \"診断\"       \"合併症\"     \"KL6\"       \n## [11] \"FVC\"        \"FEV1\"       \"%DLco\"\n\ndata_renamed_sheet1 &lt;- data_raw_sheet1 %&gt;% \n  dplyr::rename_with(\n    ~ c(\"index\", \"facility\", \"facility_id\", \"date_enroll\", \"sex\", \"age_enroll\",\n        \"date_birth\", \"dx\", \"comobidities\", \n        \"KL6_0y\", \"FVC_0y\", \"FEV1_0y\", \"pct_DLco_0y\")\n  )\n\nnames(data_renamed_sheet1)\n##  [1] \"index\"        \"facility\"     \"facility_id\"  \"date_enroll\"  \"sex\"         \n##  [6] \"age_enroll\"   \"date_birth\"   \"dx\"           \"comobidities\" \"KL6_0y\"      \n## [11] \"FVC_0y\"       \"FEV1_0y\"      \"pct_DLco_0y\"\n\n\n\n\n\nCode\n# 「アウトカム」のデータ\n# 2行分の見出しはそのままでは見づらいのでまず転置する\ndata_raw_sheet2_names %&gt;%\n  t() %&gt;%\n  # そのままでは列名がないため手動でつけて tibble data frame 化\n  dplyr::as_tibble(.name_repair = ~ c(\"period\", \"var\"))\n## # A tibble: 17 × 2\n##    period var                     \n##    &lt;chr&gt;  &lt;chr&gt;                   \n##  1 &lt;NA&gt;   \"登録番号\"              \n##  2 &lt;NA&gt;   \"施設\"                  \n##  3 &lt;NA&gt;   \"施設ID\"                \n##  4 &lt;NA&gt;   \"転帰日\"                \n##  5 &lt;NA&gt;   \"転帰\\r\\n打ち切り0死亡1\"\n##  6 1年後  \"KL6\"                   \n##  7 &lt;NA&gt;   \"FVC\"                   \n##  8 &lt;NA&gt;   \"FEV1\"                  \n##  9 &lt;NA&gt;   \"%DLco\"                 \n## 10 3年後  \"KL6\"                   \n## 11 &lt;NA&gt;   \"FVC\"                   \n## 12 &lt;NA&gt;   \"FEV1\"                  \n## 13 &lt;NA&gt;   \"%DLco\"                 \n## 14 5年後  \"KL6\"                   \n## 15 &lt;NA&gt;   \"FVC\"                   \n## 16 &lt;NA&gt;   \"FEV1\"                  \n## 17 &lt;NA&gt;   \"%DLco\"\n\n# 改行 \\r\\n を削除し、periodの空欄（セル結合されていた部分）を埋める\ndata_raw_sheet2_names %&gt;%\n  t() %&gt;%\n  dplyr::as_tibble(.name_repair = ~ c(\"period\", \"var\")) %&gt;%\n  tidyr::fill(period, .direction = \"down\") %&gt;%\n  dplyr::mutate(var = str_replace_all(var, \"\\\\r\\\\n\", \"_\"))\n## # A tibble: 17 × 2\n##    period var                \n##    &lt;chr&gt;  &lt;chr&gt;              \n##  1 &lt;NA&gt;   登録番号           \n##  2 &lt;NA&gt;   施設               \n##  3 &lt;NA&gt;   施設ID             \n##  4 &lt;NA&gt;   転帰日             \n##  5 &lt;NA&gt;   転帰_打ち切り0死亡1\n##  6 1年後  KL6                \n##  7 1年後  FVC                \n##  8 1年後  FEV1               \n##  9 1年後  %DLco              \n## 10 3年後  KL6                \n## 11 3年後  FVC                \n## 12 3年後  FEV1               \n## 13 3年後  %DLco              \n## 14 5年後  KL6                \n## 15 5年後  FVC                \n## 16 5年後  FEV1               \n## 17 5年後  %DLco\n\n# var_period の形にして、登録番号～転帰の period 不要な部分は削除する\ndata_raw_sheet2_names %&gt;%\n  t() %&gt;%\n  dplyr::as_tibble(.name_repair = ~ c(\"period\", \"var\")) %&gt;% \n  tidyr::fill(period, .direction = \"down\") %&gt;%\n  dplyr::mutate(\n    var   = str_replace_all(var, \"\\\\r\\\\n\", \"_\"),\n    name  = paste(var, period, sep = \"_\"),\n    name2 = stringr::str_replace_all(name, \"_NA$\", \"\"),\n    # あわせて、項目名の日本語部分も「症例登録票」のものに沿って修正\n    name2 = stringr::str_replace_all(name2, \"年後\", \"y\"),\n    name2 = stringr::str_replace_all(name2, \"%\", \"pct_\")\n  )\n## # A tibble: 17 × 4\n##    period var                 name                   name2              \n##    &lt;chr&gt;  &lt;chr&gt;               &lt;chr&gt;                  &lt;chr&gt;              \n##  1 &lt;NA&gt;   登録番号            登録番号_NA            登録番号           \n##  2 &lt;NA&gt;   施設                施設_NA                施設               \n##  3 &lt;NA&gt;   施設ID              施設ID_NA              施設ID             \n##  4 &lt;NA&gt;   転帰日              転帰日_NA              転帰日             \n##  5 &lt;NA&gt;   転帰_打ち切り0死亡1 転帰_打ち切り0死亡1_NA 転帰_打ち切り0死亡1\n##  6 1年後  KL6                 KL6_1年後              KL6_1y             \n##  7 1年後  FVC                 FVC_1年後              FVC_1y             \n##  8 1年後  FEV1                FEV1_1年後             FEV1_1y            \n##  9 1年後  %DLco               %DLco_1年後            pct_DLco_1y        \n## 10 3年後  KL6                 KL6_3年後              KL6_3y             \n## 11 3年後  FVC                 FVC_3年後              FVC_3y             \n## 12 3年後  FEV1                FEV1_3年後             FEV1_3y            \n## 13 3年後  %DLco               %DLco_3年後            pct_DLco_3y        \n## 14 5年後  KL6                 KL6_5年後              KL6_5y             \n## 15 5年後  FVC                 FVC_5年後              FVC_5y             \n## 16 5年後  FEV1                FEV1_5年後             FEV1_5y            \n## 17 5年後  %DLco               %DLco_5年後            pct_DLco_5y\n\n# name2 で「アウトカム」データの列名を置き換える\nnames_sheet2 &lt;- data_raw_sheet2_names %&gt;%\n  t() %&gt;%\n  dplyr::as_tibble(.name_repair = ~ c(\"period\", \"var\")) %&gt;% \n  tidyr::fill(period, .direction = \"down\") %&gt;%\n  dplyr::mutate(\n    var   = str_replace_all(var, \"\\\\r\\\\n\", \"_\"),\n    name  = paste(var, period, sep = \"_\"),\n    name2 = stringr::str_replace_all(name, \"_NA$\", \"\"),\n    name2 = stringr::str_replace_all(name2, \"年後\", \"y\"),\n    name2 = stringr::str_replace_all(name2, \"%\", \"pct_\")\n  ) %&gt;% \n  dplyr::pull(name2)\n\ndata_renamed_sheet2 &lt;- data_raw_sheet2_body %&gt;% \n  dplyr::rename_with(~ names_sheet2) %&gt;% \n  # 日本語部分を「症例登録票」の変数名に沿って改名\n  rename(\n    index              = 登録番号,\n    facility           = 施設,\n    facility_id        = 施設ID,\n    date_outcome       = 転帰日,\n    outcome_cens0died1 = 転帰_打ち切り0死亡1\n  )\n\nnames(data_renamed_sheet2)\n##  [1] \"index\"              \"facility\"           \"facility_id\"       \n##  [4] \"date_outcome\"       \"outcome_cens0died1\" \"KL6_1y\"            \n##  [7] \"FVC_1y\"             \"FEV1_1y\"            \"pct_DLco_1y\"       \n## [10] \"KL6_3y\"             \"FVC_3y\"             \"FEV1_3y\"           \n## [13] \"pct_DLco_3y\"        \"KL6_5y\"             \"FVC_5y\"            \n## [16] \"FEV1_5y\"            \"pct_DLco_5y\""
  },
  {
    "objectID": "Data_cleaning_IPRegistry_html.html#つのシートのデータを結合",
    "href": "Data_cleaning_IPRegistry_html.html#つのシートのデータを結合",
    "title": "Tidyverseを活用したデータ前処理の実践：中級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "3.3 2つのシートのデータを結合",
    "text": "3.3 2つのシートのデータを結合\n2つのデータを dplyr::*_join() で結合する場合、両者に共通する部分（key）が必要です。\nkey列を指定しない場合は共通する列すべての組み合わせが一致するものが結合されますが、今回は登録番号（index）のみで結合するために data_renamed_sheet2 側の facility, facility_id を削除してから処理します（key列は必要最小限の方が良いですが、key列以外の両者に共通する名前の列には .x, .y などの識別子（suffix）が付加されます）。\nここでは data_renamed_sheet1 と data_renamed_sheet2 の行数は同じで、それぞれに含まれる症例も同じかつ各シート内で重複はないはずなので、「症例登録票」（左側）の各行に「アウトカム」（右側）の対応するデータを結合する dplyr::left_join() を使用します。\n\n\n\n\n\n\n*_join() 系の関数の種類と結合の仕方\n\n\n\nData transformation with dplyr :: CHEATSHEET （注：リンク先はPDF）の Combine Tables - RELATIONAL DATA の項を参照してください。\n基本的には left_join() と select() や filter() を駆使することで何とかなることが多いので、まずは left_join() に慣れてから他の join を試すのが良いと思います。\n\n\n\n\nCode\ndata_combined &lt;- data_renamed_sheet1 %&gt;% \n  tidylog::left_join(\n    # 重複する施設名、施設IDを削除してから結合\n    data_renamed_sheet2 %&gt;% dplyr::select(-facility, -facility_id),\n    # index が一致するデータを結合する\n    by = dplyr::join_by(index)\n  )\n## left_join: added 14 columns (date_outcome, outcome_cens0died1, KL6_1y, FVC_1y, FEV1_1y, …)\n##            &gt; rows only in x                            0\n##            &gt; rows only in data_renamed_sheet2 %&gt;%.. (  0)\n##            &gt; matched rows                            400\n##            &gt;                                        =====\n##            &gt; rows total                              400"
  },
  {
    "objectID": "Data_cleaning_IPRegistry_html.html#日付データの処理",
    "href": "Data_cleaning_IPRegistry_html.html#日付データの処理",
    "title": "Tidyverseを活用したデータ前処理の実践：中級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "3.4 日付データの処理",
    "text": "3.4 日付データの処理\n今回は読み込んだ際に &lt;dttm&gt; すなわち lubridate パッケージで使用される date-time 型（日時型）として概ね適切に読み込まれています。ただ、時刻の情報は不要なので date 型に変換しておきます。\n\n\nCode\n# 型の確認\ndata_combined %&gt;% dplyr::select(starts_with(\"date_\")) %&gt;% head(3)\n## # A tibble: 3 × 3\n##   date_enroll         date_birth          date_outcome       \n##   &lt;dttm&gt;              &lt;dttm&gt;              &lt;dttm&gt;             \n## 1 2013-10-01 00:00:00 1936-01-04 00:00:00 2023-08-24 00:00:00\n## 2 2013-10-03 00:00:00 1945-05-04 00:00:00 2014-01-08 00:00:00\n## 3 2013-10-03 00:00:00 1946-06-02 00:00:00 2024-01-21 00:00:00\n\n# 変換\ndata_combined &lt;- data_combined %&gt;% \n  # date_ で始まる列を一括して lubridate::ymd() で日付型に変換する\n  tidylog::mutate(across(starts_with(\"date_\"), lubridate::ymd))\n## mutate: converted 'date_enroll' from double to Date (0 new NA)\n##         converted 'date_birth' from double to Date (0 new NA)\n##         converted 'date_outcome' from double to Date (0 new NA)\n\n# 型の確認\ndata_combined %&gt;% dplyr::select(starts_with(\"date_\")) %&gt;% head(3)\n## # A tibble: 3 × 3\n##   date_enroll date_birth date_outcome\n##   &lt;date&gt;      &lt;date&gt;     &lt;date&gt;      \n## 1 2013-10-01  1936-01-04 2023-08-24  \n## 2 2013-10-03  1945-05-04 2014-01-08  \n## 3 2013-10-03  1946-06-02 2024-01-21\n\n\n\n\n\n\n\n\n日付がシリアル値で読み込まれたとき\n\n\n\n冒頭で Sheet2 をそのまま読み込んだ例のように、Excelで日付だったデータが 40000前後の整数として読み込まれてしまうことがあります。これはシリアル値といって、「1900-01-01 を起点とした経過日数」と定義される値ですが、Excelでは開発当時の主流であった表計算ソフト Lotus1-2-3 の【うるう年バグ】にあわせて 実際は「1899-12-30を起点とした経過日数」 になっているのでマニュアルを真に受けると2日のズレが生じます（調べれば出てくるのですが、定義と実装が違うのは困りものです）。\n\n\nCode\nlubridate::ymd(\"1899-12-30\") + lubridate::period(40000, units = \"days\")\n## [1] \"2009-07-06\"\n\n\nさらに、mac版のExcelでは条件により「1904-01-01を起点とした経過日数」の場合があります。変換は以下のように lubridate::as_date() に origin を指定することでできますが、必ず元のExcelファイルと照合・確認するようにしてください。\n\n\nCode\n# date_outcome 冒頭3例\nc(45162, 41647, 45053) %&gt;% lubridate::as_date(origin = \"1899-12-30\")\n## [1] \"2023-08-24\" \"2014-01-08\" \"2023-05-07\""
  },
  {
    "objectID": "Data_cleaning_IPRegistry_html.html#観察期間の算出",
    "href": "Data_cleaning_IPRegistry_html.html#観察期間の算出",
    "title": "Tidyverseを活用したデータ前処理の実践：中級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "3.5 観察期間の算出",
    "text": "3.5 観察期間の算出\n配布データ「ip_registry_data.xlsx」には観察期間の変数がありません（模擬データとして作成した元データには観察期間を含めていたのですが、デモ用Excelファイルを作成する際に含め忘れました）。登録日と転帰日から観察期間 time を算出しておきます。今回は月単位とします。\n\n\nCode\ndata_with_time &lt;- data_combined %&gt;% \n  dplyr::mutate(\n    # lubridate の関数を使って経過期間を月数で取得、小数点以下1桁で丸める\n    time = lubridate::interval(start = date_enroll, end = date_outcome) %&gt;% \n             lubridate::time_length(unit = \"months\") %&gt;% \n             round(1)\n  )\n\ndata_with_time %&gt;% dplyr::select(index, date_enroll, date_outcome, time)\n## # A tibble: 400 × 4\n##    index date_enroll date_outcome  time\n##    &lt;dbl&gt; &lt;date&gt;      &lt;date&gt;       &lt;dbl&gt;\n##  1     1 2013-10-01  2023-08-24   119. \n##  2     2 2013-10-03  2014-01-08     3.2\n##  3     3 2013-10-03  2024-01-21   124. \n##  4     4 2013-10-04  2023-05-07   115. \n##  5     5 2013-10-05  2024-01-27   124. \n##  6     6 2013-10-07  2016-04-04    29.9\n##  7     7 2013-10-08  2024-02-13   124. \n##  8     8 2013-10-08  2013-11-15     1.2\n##  9     9 2013-10-11  2024-02-19   124. \n## 10    10 2013-10-14  2024-03-10   125. \n## # ℹ 390 more rows\n# tibble データは Console に表示するときに独特の丸めが行われる\n# View() を使えば、小数点以下の数字も省略せずに表示される"
  },
  {
    "objectID": "Data_cleaning_IPRegistry_html.html#合併症の整理",
    "href": "Data_cleaning_IPRegistry_html.html#合併症の整理",
    "title": "Tidyverseを活用したデータ前処理の実践：中級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "3.6 合併症の整理",
    "text": "3.6 合併症の整理\ncomobidities についてはセル内改行、表記の揺れなど問題が多いので一度内容を確認しておきます。\nまた、このような場合には変換処理がうまく出来ているか確認するために、試行錯誤の段階では全例ではなく問題の大きな数例を抽出して結果を確認しながら進めた方が効率的です。そのために、それぞれの表記の代表として一番若い登録番号を確認しておきます。\n\n\nCode\ntemp &lt;- data_with_time %&gt;%\n  # comobidities の内容毎に、例数と一番若い登録番号を抽出\n  dplyr::group_by(comobidities) %&gt;%\n  dplyr::summarise(\n    cases = n(),\n    index = min(index)\n  )\n\ntemp\n## # A tibble: 14 × 3\n##    comobidities                 cases index\n##    &lt;chr&gt;                        &lt;int&gt; &lt;dbl&gt;\n##  1 \"なし\"                          72     1\n##  2 \"不整脈\"                        22    66\n##  3 \"不整脈\\r\\n高血圧\"              38    17\n##  4 \"不整脈、高血圧\"                 2   109\n##  5 \"不明\"                           9    13\n##  6 \"糖尿病\"                        40    11\n##  7 \"糖尿病\\r\\n不整脈\"              19     2\n##  8 \"糖尿病\\r\\n不整脈\\r\\n高血圧\"    23     8\n##  9 \"糖尿病\\r\\n高血圧\"              57    30\n## 10 \"糖尿病、不整脈\"                 1    78\n## 11 \"糖尿病、不整脈、高血圧\"         1     7\n## 12 \"糖尿病、高血圧\"                 3   135\n## 13 \"高血圧\"                        92     5\n## 14  &lt;NA&gt;                           21     4\n\n\n合併症の種類毎に有無の変数を作成します（ここでは糖尿病、不整脈、高血圧の3つのみですが実際はもっと色々あるので主要なものについて同様の処理をすることになります）。\n\n\n\nCode\n# まずは作業用のサブセットを作成\ndata_with_time %&gt;% \n  tidylog::filter(index %in% temp$index) %&gt;% \n  tidylog::select(index, comobidities)\n## filter: removed 386 rows (96%), 14 rows remaining\n## select: dropped 26 variables (facility, facility_id, date_enroll, sex, age_enroll, …)\n## # A tibble: 14 × 2\n##    index comobidities                \n##    &lt;dbl&gt; &lt;chr&gt;                       \n##  1     1 \"なし\"                      \n##  2     2 \"糖尿病\\r\\n不整脈\"          \n##  3     4  &lt;NA&gt;                       \n##  4     5 \"高血圧\"                    \n##  5     7 \"糖尿病、不整脈、高血圧\"    \n##  6     8 \"糖尿病\\r\\n不整脈\\r\\n高血圧\"\n##  7    11 \"糖尿病\"                    \n##  8    13 \"不明\"                      \n##  9    17 \"不整脈\\r\\n高血圧\"          \n## 10    30 \"糖尿病\\r\\n高血圧\"          \n## 11    66 \"不整脈\"                    \n## 12    78 \"糖尿病、不整脈\"            \n## 13   109 \"不整脈、高血圧\"            \n## 14   135 \"糖尿病、高血圧\"\n\n# サブセットを使って動作検証\ndata_with_time %&gt;% \n  dplyr::filter(index %in% temp$index) %&gt;% \n  dplyr::select(index, comobidities) %&gt;% \n  # 「不明」は欠測と同じ扱いにする\n  tidylog::mutate(\n    comobidities = stringr::str_replace_all(comobidities, \"不明\", NA_character_)\n  ) %&gt;% \n  # それぞれの病名を含んでいる場合は「あり」、含まない場合「なし」、NA は NA\n  tidylog::mutate(\n    com_diabetes     = dplyr::if_else(stringr::str_detect(comobidities, \"糖尿病\"), \"あり\", \"なし\"),\n    com_arrythmia    = dplyr::if_else(stringr::str_detect(comobidities, \"不整脈\"), \"あり\", \"なし\"),\n    com_hypertention = dplyr::if_else(stringr::str_detect(comobidities, \"高血圧\"), \"あり\", \"なし\")\n  )\n## mutate: changed one value (7%) of 'comobidities' (one new NA)\n## mutate: new variable 'com_diabetes' (character) with 3 unique values and 14% NA\n##         new variable 'com_arrythmia' (character) with 3 unique values and 14% NA\n##         new variable 'com_hypertention' (character) with 3 unique values and 14% NA\n## # A tibble: 14 × 5\n##    index comobidities               com_diabetes com_arrythmia com_hypertention\n##    &lt;dbl&gt; &lt;chr&gt;                      &lt;chr&gt;        &lt;chr&gt;         &lt;chr&gt;           \n##  1     1 \"なし\"                     なし         なし          なし            \n##  2     2 \"糖尿病\\r\\n不整脈\"         あり         あり          なし            \n##  3     4  &lt;NA&gt;                      &lt;NA&gt;         &lt;NA&gt;          &lt;NA&gt;            \n##  4     5 \"高血圧\"                   なし         なし          あり            \n##  5     7 \"糖尿病、不整脈、高血圧\"   あり         あり          あり            \n##  6     8 \"糖尿病\\r\\n不整脈\\r\\n高血… あり         あり          あり            \n##  7    11 \"糖尿病\"                   あり         なし          なし            \n##  8    13  &lt;NA&gt;                      &lt;NA&gt;         &lt;NA&gt;          &lt;NA&gt;            \n##  9    17 \"不整脈\\r\\n高血圧\"         なし         あり          あり            \n## 10    30 \"糖尿病\\r\\n高血圧\"         あり         なし          あり            \n## 11    66 \"不整脈\"                   なし         あり          なし            \n## 12    78 \"糖尿病、不整脈\"           あり         あり          なし            \n## 13   109 \"不整脈、高血圧\"           なし         あり          あり            \n## 14   135 \"糖尿病、高血圧\"           あり         なし          あり\n\n# 問題なさそうなので本番の処理\ndata_separated_com &lt;- data_with_time %&gt;% \n  # 「不明」は欠測と同じ扱いにする\n  tidylog::mutate(\n    comobidities = stringr::str_replace_all(comobidities, \"不明\", NA_character_)\n  ) %&gt;% \n  # それぞれの病名を含んでいる場合は「あり」、含まない場合「なし」、NA は NA\n  tidylog::mutate(\n    com_diabetes     = dplyr::if_else(stringr::str_detect(comobidities, \"糖尿病\"), \"あり\", \"なし\"),\n    com_arrythmia    = dplyr::if_else(stringr::str_detect(comobidities, \"不整脈\"), \"あり\", \"なし\"),\n    com_hypertention = dplyr::if_else(stringr::str_detect(comobidities, \"高血圧\"), \"あり\", \"なし\")\n  ) %&gt;% \n  # 元の comobidites は削除\n  tidylog::select(-comobidities)\n## mutate: changed 9 values (2%) of 'comobidities' (9 new NAs)\n## mutate: new variable 'com_diabetes' (character) with 3 unique values and 8% NA\n##         new variable 'com_arrythmia' (character) with 3 unique values and 8% NA\n##         new variable 'com_hypertention' (character) with 3 unique values and 8% NA\n## select: dropped one variable (comobidities)"
  },
  {
    "objectID": "Data_cleaning_IPRegistry_html.html#誤差外れ値の確認最終データ",
    "href": "Data_cleaning_IPRegistry_html.html#誤差外れ値の確認最終データ",
    "title": "Tidyverseを活用したデータ前処理の実践：中級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "3.7 誤差、外れ値の確認～最終データ",
    "text": "3.7 誤差、外れ値の確認～最終データ\nView(data_separated_com) で目視確認しても良いですが、せっかくなのでRに小数点以下の桁数を数えさせてみます。\n\n\nCode\ndata_separated_com %&gt;% \n  # 数値の列を抽出\n  dplyr::select(where(is.numeric)) %&gt;% \n  dplyr::mutate(\n    # すべての列で小数点以下の桁数をカウント\n    across(dplyr::everything(),\n           function(x) {\n             # 数値を文字列に変換\n             x &lt;- as.character(x)\n             # 小数点（1文字以上の数字の後に .）があればそれ以降の文字数、なければ 0\n             dplyr::if_else(stringr::str_detect(x, \"\\\\d+\\\\.\"),\n                            stringr::str_replace(x, \"\\\\d+\\\\.\", \"\") %&gt;% nchar(),\n                            0) %&gt;% \n               # 集計の都合で因子変数化\n               factor()\n           })\n  ) %&gt;% \n  summary()\n##  index   facility_id age_enroll  KL6_0y    FVC_0y  FEV1_0y pct_DLco_0y\n##  0:400   0:400       0:400      0   :390   0:  4   0:  3   0   : 43   \n##                                 NA's: 10   1: 48   1: 49   1   :329   \n##                                            2:348   2:348   NA's: 28   \n##                                                                       \n##  outcome_cens0died1  KL6_1y     FVC_1y    FEV1_1y    pct_DLco_1y  KL6_3y   \n##  0:400              0   :320   0   :  5   0   :  3   0   : 28    0   :230  \n##                     NA's: 80   1   : 41   1   : 30   1   :265    NA's:170  \n##                                2   :286   2   :297   NA's:107              \n##                                NA's: 68   NA's: 70                         \n##   FVC_3y    FEV1_3y    pct_DLco_3y  KL6_5y     FVC_5y    FEV1_5y    pct_DLco_5y\n##  0   :  5   0   :  4   0   : 21    0   :156   0   :  2   0   :  5   0   :  8   \n##  1   : 24   1   : 21   1   :160    NA's:244   1   : 21   1   : 15   1   :101   \n##  2   :202   2   :202   NA's:219               2   :129   2   :128   NA's:291   \n##  NA's:169   NA's:173                          NA's:248   NA's:252              \n##  time   \n##  0: 37  \n##  1:363  \n##         \n## \n\n\n冒頭あるいはスライドで Sheet2 をそのまま読み込んだ例のように、ソフト内部での小数の扱いの違いにより小数点以下10桁くらいでの誤差が生じる場合がありますが、今回はExcelでの表示通り小数点以下1～2桁で読み込めているようです。\n修正が必要な場合は、dplyr::mutate() と round() を組み合わせて修正しておきます。\n\n\nCode\n# dummy code\ndata_dummy %&gt;% mutate(some_data = round(some_data, digits = 2))\n\n\n外れ値については、ヒストグラムを書いて不自然に離れたものがないか確認してみます。\n\n\nCode\ndata_separated_com %&gt;%\n  # 数値の列を抽出、そのうち登録番号やアウトカムは除外\n  dplyr::select(where(is.numeric)) %&gt;%\n  dplyr::select(-c(index, facility_id, outcome_cens0died1)) %&gt;%\n  # 縦持ちに変換\n  tidyr::pivot_longer(\n    cols      = dplyr::everything(),\n    names_to  = \"var\",\n    values_to = \"value\"\n  ) %&gt;%\n  # まとめてヒストグラム\n  ggplot2::ggplot(aes(x = value)) +\n    ggplot2::geom_histogram(bins = 20) +\n    # 外れ値を探すため、count が 0 - 10 の小さいところを拡大\n    ggplot2::coord_cartesian(ylim = c(0, 10)) +\n    # ひとまとめに表示。X軸は変動\n    ggplot2::facet_wrap(~ var, ncol = 5, scales = \"free_x\") +\n    # X軸タイトルは非表示\n    ggplot2::labs(x = NULL)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n  \n  \n\n\n  \n  \n\n\n  \n  \n\n\n  \n  \n  \n\n\n\n\n\n  \n  \n\n\n  \n  \n\n\n  \n  \n\n\n\n\n\n  \n\n\n  \n  \n\n\n  \n  \n  \n\n\n\n\n\n\n\n\n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n\n\n\n\n\n  \n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n\n\n\n\n\n  \n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n\n\n\n\n\n\n  \n  \n\n\n  \n  \n\n\n  \n  \n\n\n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n\n\n\n\n  \n  \n\n\n  \n  \n\n\n  \n  \n\n\n  \n  \n  \n\n\n\n\n\n\n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n\n\n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n\n\n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n\n\n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n\n\n\n  \n  \n\n\n  \n  \n\n\n  \n  \n\n\n\n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n\n\n\n  \n\n\n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n\n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n\n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n\n\n\n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n\n\n\n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n\n\n\n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n\n\n  \n  \n  \n  \n\n\n\n\n\n\n\n  \n  \n  \n  \n  \n\n\n\n\n\n\n\nFEV1_1y, FEV1_5y, FVC_0y, FVC_3y に明らかに桁が違う値があることがわかります。\n実は、これらは呼吸機能検査の結果でリットル単位のところ、小数点を入力し忘れて100倍になってしまったエラー を模して意図的に入れたものです。この様にわかりやすく想定される修正をして違和感のない値になるものは良いですが、実際は試験事務局や参加施設に確認が必要な地道な作業になります。\n外れ値を直しつつ、解析に不要な変数を除外して最終のデータセットを作ります。\n\n\nCode\n# 外れ値の確認\ndata_separated_com %&gt;%\n  dplyr::select(index, FEV1_1y, FEV1_5y, FVC_0y, FVC_3y) %&gt;%\n  dplyr::filter(FEV1_1y &gt; 100 | FEV1_5y &gt; 100 | FVC_0y &gt; 100 | FVC_3y &gt; 100)\n## # A tibble: 9 × 5\n##   index FEV1_1y FEV1_5y FVC_0y FVC_3y\n##   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n## 1    16  191       0.53   2.52   2.72\n## 2    85    2.95   NA    198      2.05\n## 3   125    2.1   256      2.9    2.31\n## 4   160    2.57    2.33   3.7  212   \n## 5   194    1.25   NA    280      0.81\n## 6   200    1.89   NA      2.71 355   \n## 7   249    2.23    1.67   2.98 359   \n## 8   265    1.52  130      2.28  NA   \n## 9   365   NA      NA    252     NA\n\n# 解析用データセット\ndata_work &lt;- data_separated_com %&gt;%\n  tidylog::mutate(\n    # 該当項目で 100より大きな値を 1/100 する\n    across(c(FEV1_1y, FEV1_5y, FVC_0y, FVC_3y),\n           function(x) dplyr::if_else(x &gt; 100, x / 100, x))\n  ) %&gt;%\n  # 必要な項目のみ、並べ替える\n  tidylog::select(\n    index, facility, sex, age_enroll, dx, time, outcome_cens0died1,\n    com_diabetes, com_arrythmia, com_hypertention,\n    KL6_0y, FVC_0y, FEV1_0y, pct_DLco_0y, KL6_1y, FVC_1y, FEV1_1y, pct_DLco_1y,\n    KL6_3y, FVC_3y, FEV1_3y, pct_DLco_3y, KL6_5y, FVC_5y, FEV1_5y, pct_DLco_5y\n  ) %&gt;% \n  # outcomeは 0 / 1 の因子型にしておく\n  tidylog::mutate(outcome_cens0died1 = factor(outcome_cens0died1))\n## mutate: changed 3 values (1%) of 'FVC_0y' (0 new NAs)\n##         changed one value (&lt;1%) of 'FEV1_1y' (0 new NAs)\n##         changed 3 values (1%) of 'FVC_3y' (0 new NAs)\n##         changed 2 values (&lt;1%) of 'FEV1_5y' (0 new NAs)\n## select: dropped 4 variables (facility_id, date_enroll, date_birth, date_outcome)\n## mutate: converted 'outcome_cens0died1' from double to factor (0 new NA)\n  \n# 修正の確認  \ndata_work %&gt;% \n  dplyr::select(index, FEV1_1y, FEV1_5y, FVC_0y, FVC_3y) %&gt;%\n  # 上で確認した index のデータのみ\n  dplyr::filter(index %in% c(16, 85, 125, 160, 194, 200, 249, 265, 365))\n## # A tibble: 9 × 5\n##   index FEV1_1y FEV1_5y FVC_0y FVC_3y\n##   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n## 1    16    1.91    0.53   2.52   2.72\n## 2    85    2.95   NA      1.98   2.05\n## 3   125    2.1     2.56   2.9    2.31\n## 4   160    2.57    2.33   3.7    2.12\n## 5   194    1.25   NA      2.8    0.81\n## 6   200    1.89   NA      2.71   3.55\n## 7   249    2.23    1.67   2.98   3.59\n## 8   265    1.52    1.3    2.28  NA   \n## 9   365   NA      NA      2.52  NA"
  },
  {
    "objectID": "Data_cleaning_IPRegistry_html.html#生存曲線",
    "href": "Data_cleaning_IPRegistry_html.html#生存曲線",
    "title": "Tidyverseを活用したデータ前処理の実践：中級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "4.1 生存曲線",
    "text": "4.1 生存曲線\n\n\nCode\nlibrary(survival)\nlibrary(survminer)\n\nsurvival::survfit(survival::Surv(time, outcome_cens0died1 == 1) ~ dx, data = data_work) %&gt;%\n  survminer::ggsurvplot(\n    conf.int      = TRUE,\n    risk.table    = TRUE,\n    tables.height = 0.3,\n    ggtheme       = survminer::theme_survminer(base_size = 14),\n    tables.theme  = survminer::theme_cleantable(base_size = 12),\n    surv.scale    = \"percent\", \n    break.time.by = 12,\n    xlab          = \"Observation time (mo)\",\n    legend        = \"none\"\n  )"
  },
  {
    "objectID": "Data_cleaning_IPRegistry_html.html#多変量cox比例ハザート回帰",
    "href": "Data_cleaning_IPRegistry_html.html#多変量cox比例ハザート回帰",
    "title": "Tidyverseを活用したデータ前処理の実践：中級編\n– mJOHNSNOW R解析Peer勉強会 vol.4 –",
    "section": "4.2 多変量Cox比例ハザート回帰",
    "text": "4.2 多変量Cox比例ハザート回帰\n\n\nCode\ndata_work %&gt;% \n  # FVC変化量（既知の予後因子）をつくる\n  dplyr::mutate(delta_FVC_1y = FVC_1y - FVC_0y) %&gt;% \n  # Cox比例ハザートモデル\n  survival::coxph(survival::Surv(time, outcome_cens0died1 == 1) ~\n                    dx + sex + age_enroll + delta_FVC_1y,\n                  data = .) %&gt;%\n  # 結果の表\n  gtsummary::tbl_regression(\n    exponentiate = TRUE,\n    conf.level   = 0.95\n  ) %&gt;% \n  # p値に * をつける\n  gtsummary::add_significance_stars(\n    pattern = \"{p.value} {stars}\",\n    hide_ci = FALSE,\n    hide_se = TRUE,\n    hide_p  = FALSE\n  ) %&gt;% \n  # 出力方法によっては * が Markdown として処理されてしまうため表示を変更\n  gtsummary::modify_footnote(\n    p.value ~ \"p-values; \\\\* p &lt; 0.05, \\\\*\\\\* p &lt; 0.01, \\\\*\\\\*\\\\* p &lt; 0.001\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nHR1\n95% CI1\np-value2\n\n\n\n\ndx\n\n\n\n\n\n\n\n\n    COP\n—\n—\n\n\n\n\n    IPF\n23.7\n3.29, 171\n0.002 **\n\n\n    NSIP\n10.4\n1.37, 79.0\n0.024 *\n\n\nsex\n\n\n\n\n\n\n\n\n    女\n—\n—\n\n\n\n\n    男\n1.53\n1.07, 2.19\n0.020 *\n\n\nage_enroll\n1.05\n1.02, 1.08\n0.002 **\n\n\ndelta_FVC_1y\n0.17\n0.10, 0.30\n&lt;0.001 ***\n\n\n\n1 HR = Hazard Ratio, CI = Confidence Interval\n\n\n2 p-values; * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001"
  }
]